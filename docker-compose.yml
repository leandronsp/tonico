services:
  ruby: 
    build: 
      context: .
      target: base
    volumes:
      - .:/app
      - rubygems:/usr/local/bundle

  api1: &api
    build: 
      context: .
      target: base
    container_name: api1
    environment:
      - DB_POOL_SIZE=10
      - DATABASE_HOST=postgres
      - RUBY_YJIT_ENABLE=1
    command: ruby async_server.rb
    volumes:
      - .:/app
      - rubygems:/usr/local/bundle
    depends_on:
      postgres:
        condition: service_healthy

  api2: 
    <<: *api
    container_name: api2

  postgres:
    image: postgres
    environment:
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5432:5432
    volumes:
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  pgbouncer:
    image: pgbouncer/pgbouncer
    hostname: pgbouncer
    container_name: pgbouncer
    ports:
      - 6432:6432
    environment:
      - DATABASES_HOST=postgres
      - DATABASES_PORT=5432
      - DATABASES_USER=postgres
      - DATABASES_PASSWORD=postgres
      - DATABASES_DBNAME=postgres
      - DATABASES_POOL_SIZE=100
      - PGBOUNCER_MAX_CLIENT_CONN=100
      - PGBOUNCER_RESERVE_POOL_SIZE=100
      - PGBOUNCER_DEFAULT_POOL_SIZE=100
    depends_on:
      - postgres

  nginx:
    image: nginx 
    container_name: nginx
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 9999:9999
    depends_on:
      - api1
      - api2

volumes:
  rubygems:
